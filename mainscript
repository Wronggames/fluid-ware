
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "fluid-ware",
   LoadingTitle = "[fluid-ware] - loading",
   LoadingSubtitle = "by clowningonyouL",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = true, -- Create a custom folder for your hub/game
      FileName = "fluid-ware-V1"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("HOMEüè°", nil) -- Title, Image

local UserSection = MainTab:CreateSection("USERüôç‚Äç")

Rayfield:Notify({
   Title = "FLUID-WARE>",
   Content = "fluid ware has started up.",
   Duration = 6.5,
   Image = nil,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay!",
         Callback = function()
         print("The user tapped Okay!")
      end
   },
},
})

local Button2 = MainTab:CreateButton({
   Name = "Anthonys anti-chat logger.",
   Callback = function()
   loadstring(game:HttpGet("https://raw.githubusercontent.com/AnthonyIsntHere/anthonysrepository/main/scripts/AntiChatLogger.lua", true))()
   end,
})

local Button2 = MainTab:CreateButton({
   Name = "Rejoin",
   Callback = function()
  -- rejoin		
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local Rejoin = coroutine.create(function()
    local Success, ErrorMessage = pcall(function()
        TeleportService:Teleport(game.PlaceId, LocalPlayer)
    end)

    if ErrorMessage and not Success then
        warn(ErrorMessage)
    end
end)

coroutine.resume(Rejoin)
   end,
})

local BlatantSection = MainTab:CreateSection("BLATANTüíÄ‚Äç")

local Toggle = MainTab:CreateToggle({
   Name = "Infinite-Jump",
   CurrentValue = false,
   Flag = "Toggle9", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
--script made by Youtube: MrGabbe.   Discord: Mr_G_Curry #6982
game:GetService("UserInputService").jumpRequest:Connect(function()
    if (Value) then
        game:GetService"Players".LocalPlayer.Character:FindFirstChildOfClass"Humanoid":ChangeState("Jumping")
    end
end)
end,
})
local Slider = MainTab:CreateSlider({
   Name = "speed amount",
   Range = {0, 400},
   Increment = 10,
   Suffix = "walkspeed",
   CurrentValue = 16,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)	
		game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})

local Toggle = MainTab:CreateToggle({
   Name = "spam text",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
while (Value) do
    local args = {
        [1] = "FLUID-WARE on TOP #1",
        [2] = "All"
    }

    game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))

    -- Wait for a certain amount of time before the next execution (in seconds)
    wait(1) -- Adjust the delay as needed
end


   end,
})

local CombatTab = Window:CreateTab("COMBAT‚öîÔ∏è", nil) -- Title, Image

local CombatSection = CombatTab:CreateSection("BLATANTüíÄ")

local Toggle = CombatTab:CreateToggle({
   Name = "Kill-Aura",
   CurrentValue = false,
   Flag = "Toggle2", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Value)
 if shared.settings then return end

shared.settings = {
    killaura = (Value),
    maxdistance = 30,
    debugging = true
}

local Players = game:GetService("Players")
local lp = Players.LocalPlayer or Players:GetPropertyChangedSignal("LocalPlayer"):Wait() or Players.LocalPlayer

local function getchar(plr,yield)
    local plr = plr or lp
    return plr.Character or yield and plr.CharacterAdded:Wait()
end

local function gethumanoid(plr,yield)
    local plr = plr or lp
    local char = getchar(plr,yield)
    return yield and char:WaitForChild("Humanoid") or char:FindFirstChildWhichIsA("Humanoid")
end

local function getDamageRemote()
    local char = getchar(nil,true)
    local Tool = char:FindFirstChildWhichIsA("Tool")
    local Remote = Tool and Tool:FindFirstChild("DamageRemote")
    return Remote
end

local function GetClosestPlayer()
    local dist = shared.settings.maxdistance or 1/0
    local closest_player

    for i,v in next, Players:GetPlayers() do
        if v ~= lp then
            local char = getchar(v)
            if char and not char:FindFirstChildWhichIsA("ForceField") then
                local BasePart = char:FindFirstChildWhichIsA("BasePart")
                local Humanoid = gethumanoid(v)
                local DistanceFromTarget = BasePart and lp:DistanceFromCharacter(BasePart.CFrame.Position)
        
                if DistanceFromTarget and DistanceFromTarget <= dist and Humanoid and Humanoid.Health > 0 then
                    dist = DistanceFromTarget
                    closest_player = v
                end
            end
        end
    end
    return closest_player,dist    
end

repeat
    local DamageRemote = getDamageRemote()
    if DamageRemote then
        local Target,Distance = GetClosestPlayer()
        if Target then
            DamageRemote:FireServer(gethumanoid(Target))
            if shared.settings.debugging then
                warn("Attacked",Target,"from",Distance,"studs away")
            end
        end
    end
    task.wait()
until not shared.settings.killaura

   end,
})
